this::
    date = 2019-12-29 ; 2019-12-30


abrev::
    semversion = cf::``Gestion sémantique de version ;
                       https://semver.org/lang/fr/``

    softwarelife = cf::``Software release life cycle ;
                        https://en.wikipedia.org/wiki/Software_release_life_cycle``



===================
Nommer les versions
===================

Le système de nommage des versions s'appuie sur deux standards : voir "¨semversion" et "¨softwarelife". Nous utilisons surtout les règles suivantes largement suffisantes pour des projets non professionnels.
Nous donnons au passage des exemples sous forme de notes de bas de page.
((
    Pour les documents, nous appellerons "sections" les parties, les chapitres, les sections, les sous-sections et les sous-sous-sections.
)).

    1) Un numéro de version est soit du type version::``MAJ.MIN.COR``, soit de la forme version::``MAJ.MIN.COR-EXTRA``. Aucun numéro ne s'écrira version::``MAJ.MIN``, ni version::``MAJ`` !

    1) Chaque sous-numéro commence à version::``0`` donc la toute première version sera version::``0.0.0``.

    1) Les numéros augmentent sous la forme version::``0.0.0``, version::``0.0.1``, version::``0.0.2``, version::``0.1.0``, version::``1.0.0``, ... ¨etc. Noter qu'un changement de sous-numéro remet à zéro tous les sous-numéros plus à droite.

    1) version::``MAJ`` est à modifier dès qu'un changement non rétrocompatible apparaît
    ((
        **Changement majeur :**
        pour un document ceci correspond à l'organisation visible du contenu (sections supprimées ¨etou déplacées),
        et pour un programme à un changement d'¨api.
    )).

    1) version::``MIN`` évolue lorsque de nouvelles fonctionnalités rétrocompatibles apparaissent
    ((
        **Changement mineur :**
        pour un document ceci correspond à un enrichissement du contenu (nouvelles sections ¨etou mises à jour de sections précédemment créées),
        et pour un programme à un enrichissement de l'¨api sans modifier ce qu'elle proposait avant.
    )).

    1) version::``COR`` change à chaque correction d’anomalies rétrocompatibles
    ((
        **Correctifs :**
        pour un document ceci correspond à des corrections à la marge (erreurs orthographiques, grammaticales ¨etou syntaxiques, mais aussi une réorganisation purement visuelle du contenu sans toucher à l'organisation des sections),
        et pour un programme à la correction de bogues sans toucher à l¨api.
    )).

    1) version::``EXTRA`` peut avoir les valeurs suivantes suivies éventuellement d'un point et d'un sous-numéro. On peut donc utiliser version::``1.2.0-alpha`` et version::``1.2.0-alpha.2``.

        a) version::``alpha`` indique que les fonctionnalités sont incomplètes ou partiellement terminées. Ce type de projet est à destination uniquement des concepteurs.

        a) version::``beta`` s'utilise lorsque les fonctionnalités, bien que terminées, peuvent contenir des bogues et des problèmes de performance. Ce type de projet s'adresse aux utilisateurs testeurs.

        a) version::``rc``, pour "release candidate", indique une version bêta avancée susceptible d'être un produit stable et prête à être publiée à moins que des bogues importants n'apparaissent. Ce type de projet s'adresse aux utilisateurs lambda mais qui sont avertis que le projet contient peut-être quelques bogues mineurs à signaler.

        a) Pour les versions stables, c'est à dire celles considérées comme finies, à un moment donné bien entendu, nous n'utilisons pas version::``EXTRA`` tout simplement.
